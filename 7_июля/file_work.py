# набор данных, записанный в определённой структуре данных, сохранённая на носителе, содержащая имя и, допустим, расширение
# две большие группы файлов: текстовые (человекочитаемые, в том числе с разметкой) и бинарные (мультимедиа и исполняемые)
# Такие ключи:
# t - текстовый файл
# b - бинарный файл
# w - файл открывается на запись, несуществующий создаётся, существующий обнуляется
# a - файл открывается на запись, несуществующий создаётся, новое дописывается в конец
# r - файл на чтение, он должен существовать (иначе ошибка)

# 1. файл открываем, работаем и закрываем, таков принцип
# 2. файл открывается на чтение или чтение/запись (в современном Питоне это не всегда факт)

# file_object = open('info.txt') # по умолчанию это открытие текстового файла на чтение
# file_object = open('info.txt', 'tr') # то же явным образом (или rt)
# file_object = open('info.txt', 'w', encoding='utf-8')  # файл создаётся!
#
# # все операции пишутся между "открыть" и "закрыть"
# # print(file_object)
# # print(file_object.mode)
# # print(file_object.encoding)
# # print(file_object.name)
#
# # count = file_object.write("этот текст записан в файл")
# print('В файл записано', count, 'байт')  # в файлах только в байтах, никаких битов
# # по умолчанию кодировка берётся от ОС
#
#
# file_object.close()

# fo = open("info.txt", 'rt', encoding='utf-8')  # 'r+' также дозволяет запись одновременную
# # у процесса может быть несколько потоков (тредов), потоки чтения и записи параллельно оба
# # лучше явно указывать, типа тока читаешь или пишешь
#
# # когда файл открыт, создан файловый поток, файл заблокирован
# # движение в него или из него
# # text = fo.read()
# # print(text)
# text = fo.read(11)  # сколько байт читать, если не указано, то весь; если дальше конца, то до конца
# print(text)
# fo.read(8) # читает с того места, где остановился!
# text += fo.read(21)
# print(text)
# fo.close()

fo = open('info.txt', 'at+', encoding='utf-8')
# print(*args, sep=' ', end='\n', file=None, flush=False) # по умолчанию "нан-файл" это Консоль

# text = fo.read()
# print(text)
# fo.write('\nХороший текст')
# print('\nЭто тоже сольётся в файл.', file=fo)

# построчное чтение №1
# while (line := fo.readline()):
#     print(line.rstrip('\n'))

# построчное чтение №2
# lst = fo.readlines()
# print(list(map(lambda l: l.rstrip('\n'), lst)))

# построчное чтение №3
text = fo.read()
lst = text.splitlines() # нарубит на строки (правда и пустые включит)
print(lst)

fo.close()

# Читаем несколько строк
# Есть Менеджер Контекста
# можно открыть с МК
with open('info.txt', 'rt', encoding='utf-8') as f:
    text = f.read()
    lst = text.splitlines()
    print(lst)
# Это аналог Try-With-Resources
# никаких других эффектов, кроме автозакрытия, не добавляет

"""
файл открывается не просто, а в определённом режиме
"""