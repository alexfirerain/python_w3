"""
продолжение ООП:
polymorphism

method override; operator overloading
работает съ всеми типами данных, для которых определено
например плюс смотрит, что за типы данных он связует

Полиморфизм е способность кода работать с разными типами данных
на лету просекает нужные типы
"утиная типизация": главное что делает, а делает ли, зависит от программера
"""
print(1 + 2)
print(1 + 2.0)
print('1' + '2')
print([1, 2] + [3, 4])
# хотим обмануть:
def func(x, y):
    return x + y

print(func(2, 3.0))

"""
функция isinstance(obj, type) -> bool
"""

"""
Специальные методы
__init__() например
инициализирует все поля и т.д.
Ещё у нас е своеобразный Тустринг:
__str__

str(a) → a.__str__()

__repr__
для представления в более сложных случаях
в принципе эти двое ↑ взаимозаменяются

https://gist.github.com/R-udren/f1b6ef1d1aa914e410392d6992942367
https://pythonlib.ru/95?ysclid=mcxa7408x8355248183

__call__
экземпляр класса можно вызвать как функцию!
 
"""

"""
НАСЛЕДОВАНИЕ
inheritance
базовый родительский суперкласс 
    и производный дочерний класс


"""